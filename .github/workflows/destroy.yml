# This is a basic workflow to help you get started with Actions

name: eks destory pipeline
on:
  # Manually trigger from Actions tab
  workflow_dispatch:
  
jobs:
  destroy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init -input=false
                
      - name: Terraform destory
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          EXCLUDELIST='data.aws_caller_identity.current,aws_dynamodb_table.tfstatefilestorelock,aws_s3_bucket.tfstatefilestore,module.tfstatefilestore.aws_s3_bucket_acl.bucketacl,module.tfstatefilestore.aws_s3_bucket_ownership_controls.ownershipcontrol,module.tfstatefilestore.aws_s3_bucket_public_access_block.publicaccesscontrol,module.tfstatefilestore.aws_s3_bucket_server_side_encryption_configuration.encryptionconfig'
          DESTROYLIST=''
          for resource in $(terraform state list);do
            if grep -q "${resource}" <<< "${EXCLUDELIST}" ;then
                echo "Skipped deletion of ${resource}"
            else
                DESTROYLIST="${DESTROYLIST} -target=${resource}"
            fi
          done
          echo ${DESTROYLIST}
          terraform apply -auto-approve -input=false -destroy $(for resource in $(terraform state list | egrep -v "data*");do echo -target=${resource}; done | tr '\n' ' ')
